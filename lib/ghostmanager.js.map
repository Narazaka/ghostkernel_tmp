{"version":3,"sources":["lib/ghostmanager.coffee"],"names":[],"mappings":"AACA;AAAA,MAAA;;EAAM;2BAEJ,MAAA,GAAQ;;IAGK,sBAAC,OAAD,EAAW,OAAX;MAAC,IAAC,CAAA,UAAD;MAAU,IAAC,CAAA,UAAD;MACtB,IAAC,CAAA,MAAD,GAAU;IADC;;2BAGb,UAAA,GAAY,SAAC,SAAD,EAAY,OAAZ,EAAqB,YAArB;aACV,IAAC,CAAA,UAAD,CAAY,SAAZ,EAAuB,OAAvB,EAAgC,YAAhC,CAA6C,CAAC,IAA9C,CAAmD,SAAC,MAAD;eACjD,MAAM,CAAC,KAAP,CAAA;MADiD,CAAnD;IADU;;2BAYZ,UAAA,GAAY,SAAC,SAAD,EAAY,SAAZ,EAAuB,WAAvB,EAAoC,OAApC,EAA6C,YAA7C;aACV,OAAO,CAAC,GAAR,CAAY,CACV,IAAC,CAAA,UAAD,CAAY,SAAZ,EAAuB,OAAvB,CADU,EAEV,IAAC,CAAA,UAAD,CAAY,SAAZ,EAAuB,SAAvB,EAAkC,OAAlC,CAFU,EAGV,IAAC,CAAA,YAAD,CAAc,WAAd,EAA2B,OAA3B,CAHU,CAAZ,CAIE,CAAC,IAJH,CAIQ,SAAC,GAAD;AACN,YAAA;QADQ,iBAAQ,gBAAO;QACvB,OAAA,GAAc,IAAA,OAAA,CAAQ,MAAR;QACd,KAAA,GAAQ,YAAY,CAAC,cAAb,CAA4B,KAA5B,EAAmC,OAAnC;QACR,GAAA,GAAU,IAAA,kBAAA,CAAmB,KAAnB;eACN,IAAA,WAAA,CAAY,OAAZ,EAAqB,KAArB,EAA4B,GAA5B;MAJE,CAJR;IADU;;IAeZ,YAAC,CAAA,aAAD,GAAgB,SAAC,OAAD;AACd,UAAA;MAAA,cAAA,GAAiB,OAAO,CAAC,KAAR,CAAc,QAAd,CAAwB,CAAA,CAAA;aACzC,OAAO,CAAC,OAAR,CAAoB,IAAA,MAAA,CAAO,IAAA,GAAO,cAAP,GAAwB,IAA/B,CAApB,EAA0D,cAA1D;IAFc;;2BAQhB,UAAA,GAAY,SAAC,SAAD,EAAY,OAAZ;MACV,IAAC,CAAA,mBAAD,CAAqB,SAArB;aACA,YAAY,CAAC,oBAAb,CAAkC,SAAlC,EAA6C,OAA7C,CACA,CAAC,IADD,CACM,CAAA,SAAA,KAAA;eAAA,SAAC,SAAD;UACJ,KAAC,CAAA,aAAD,CAAe,SAAf,EAA0B,SAA1B;iBACA,YAAY,CAAC,WAAb,CAAyB,SAAzB;QAFI;MAAA,CAAA,CAAA,CAAA,IAAA,CADN,CAIC,CAAC,IAJF,CAIO,CAAA,SAAA,KAAA;eAAA,SAAC,KAAD;UACL,KAAC,CAAA,eAAD,CAAiB,SAAjB,EAA4B,KAA5B;iBACA;QAFK;MAAA,CAAA,CAAA,CAAA,IAAA,CAJP;IAFU;;IAeZ,YAAC,CAAA,oBAAD,GAAuB,SAAC,SAAD,EAAY,OAAZ;AACrB,UAAA;MAAA,OAAA,GAAU,YAAY,CAAC,aAAb,CAA2B,OAAO,CAAC,iBAAR,CAA0B,SAA1B,CAA3B;aACV,OAAO,CAAC,YAAR,CAAqB,SAArB;IAFqB;;IAOvB,YAAC,CAAA,WAAD,GAAc,SAAC,SAAD;aACZ,YAAY,CAAC,aAAb,CAA2B,OAAO,CAAC,OAAO,CAAC,EAA3C,EAA+C,OAA/C,CAAuD,CAAC,IAAxD,CAA6D,SAAC,MAAD;eAC3D,MAAM,CAAC,IAAP,CAAY,OAAZ;MAD2D,CAA7D;IADY;;2BAUd,UAAA,GAAY,SAAC,SAAD,EAAY,SAAZ,EAAuB,OAAvB;MACV,IAAC,CAAA,mBAAD,CAAqB,SAArB,EAAgC,SAAhC;aACA,YAAY,CAAC,oBAAb,CAAkC,SAAlC,EAA6C,SAA7C,EAAwD,OAAxD,CACA,CAAC,IADD,CACM,CAAA,SAAA,KAAA;eAAA,SAAC,SAAD;UACJ,KAAC,CAAA,aAAD,CAAe,SAAf,EAA0B,SAA1B,EAAqC,SAArC;iBACA,YAAY,CAAC,WAAb,CAAyB,SAAzB;QAFI;MAAA,CAAA,CAAA,CAAA,IAAA,CADN,CAIC,CAAC,IAJF,CAIO,CAAA,SAAA,KAAA;eAAA,SAAC,KAAD;UACL,KAAC,CAAA,eAAD,CAAiB,SAAjB,EAA4B,SAA5B,EAAuC,KAAvC;iBACA;QAFK;MAAA,CAAA,CAAA,CAAA,IAAA,CAJP;IAFU;;IAgBZ,YAAC,CAAA,oBAAD,GAAuB,SAAC,SAAD,EAAY,SAAZ,EAAuB,OAAvB;aACrB,OAAO,CAAC,KAAR,CAAc,SAAd,EAAyB,SAAzB;IADqB;;IAMvB,YAAC,CAAA,WAAD,GAAc,SAAC,SAAD;AACZ,UAAA;MAAA,KAAA,GAAY,IAAA,UAAU,CAAC,KAAX,CAAiB,SAAS,CAAC,aAAV,CAAA,CAAjB;aACZ,KAAK,CAAC,IAAN,CAAA;IAFY;;2BAQd,YAAA,GAAc,SAAC,WAAD,EAAc,OAAd;MACZ,IAAC,CAAA,qBAAD,CAAuB,WAAvB;aACA,YAAY,CAAC,sBAAb,CAAoC,WAApC,EAAiD,OAAjD,CACA,CAAC,IADD,CACM,CAAA,SAAA,KAAA;eAAA,SAAC,SAAD;UACJ,KAAC,CAAA,eAAD,CAAiB,WAAjB,EAA8B,SAA9B;iBACA,YAAY,CAAC,aAAb,CAA2B,SAA3B;QAFI;MAAA,CAAA,CAAA,CAAA,IAAA,CADN,CAIC,CAAC,IAJF,CAIO,CAAA,SAAA,KAAA;eAAA,SAAC,OAAD;UACL,KAAC,CAAA,iBAAD,CAAmB,WAAnB,EAAgC,KAAhC;iBACA;QAFK;MAAA,CAAA,CAAA,CAAA,IAAA,CAJP;IAFY;;IAed,YAAC,CAAA,sBAAD,GAAyB,SAAC,WAAD,EAAc,OAAd;aACvB,OAAO,CAAC,OAAR,CAAgB,WAAhB;IADuB;;IAMzB,YAAC,CAAA,aAAD,GAAgB,SAAC,SAAD;AACd,UAAA;MAAA,OAAA,GAAc,IAAA,UAAU,CAAC,OAAX,CAAmB,SAAS,CAAC,aAAV,CAAA,CAAnB;aACd,OAAO,CAAC,IAAR,CAAA;IAFc;;;;;;EAKlB,IAAG,oFAAH;IACE,MAAM,CAAC,OAAP,GAAiB;MAAA,YAAA,EAAc,YAAd;MADnB;GAAA,MAAA;IAGE,IAAC,CAAA,YAAD,GAAgB,aAHlB;;AAnIA","file":"lib/ghostmanager.js","sourceRoot":"/source/","sourcesContent":["# Ukagaka baseware ghost manager\nclass GhostManager\n  # @property [Array<GhostKernel>] ghost instances\n  ghosts: null\n\n  # constructor\n  constructor: (@profile, @plugins) ->\n    @ghosts = []\n\n  boot_ghost: (ghostpath, storage, namedmanager) ->\n    @get_kernel(ghostpath, storage, namedmanager).then((kernel) ->\n      kernel.start()\n    )\n\n  # build ghost kernel\n  # @param ghostpath [string] ghostpath\n  # @param shellpath [string] shellpath\n  # @param balloonpath [string] balloonpath\n  # @param storage [NanikaStorage] storage\n  # @param namedmanager [NamedManager] named manager\n  # @return [Promise<GhostKernel>] ghost kernel instance\n  get_kernel: (ghostpath, shellpath, balloonpath, storage, namedmanager) ->\n    Promise.all([\n      @_get_ghost(ghostpath, storage)\n      @_get_shell(ghostpath, shellpath, storage)\n      @_get_balloon(balloonpath, storage)\n    ]).then(([shiori, shell, balloon]) ->\n      shiorif = new Shiorif(shiori)\n      named = namedmanager.register_named(shell, balloon)\n      ssp = new SakuraScriptPlayer(named)\n      new GhostKernel(shiorif, named, ssp)\n    )\n\n  # ensure path separator at dirpath' end\n  # @param dirpath [string] dirpath\n  # @return [string] dirpath that ends with path separator\n  @_canondirpath: (dirpath) ->\n    path_separator = dirpath.match(/[\\\\\\/]/)[0]\n    dirpath.replace(new RegExp('\\\\' + path_separator + '?$'), path_separator)\n\n  # get ghost(shiori) instance\n  # @param ghostpath [string] ghostpath\n  # @param storage [NanikaStorage] storage\n  # @return [Promise<Shiori>] ghost(shiori) instance\n  _get_ghost: (ghostpath, storage) ->\n    @on_load_ghost_files(ghostpath)\n    GhostManager._get_ghost_directory(ghostpath, storage)\n    .then((directory) =>\n      @on_ghost_load(ghostpath, directory)\n      GhostManager._load_ghost(directory)\n    ).then((ghost) =>\n      @on_ghost_loaded(ghostpath, ghost)\n      ghost\n    )\n\n  # get ghost directory contents\n  # @param ghostpath [string] ghostpath\n  # @param storage [NanikaStorage] storage\n  # @return [Promise<NanikaDirectory>] ghost directory contents\n  @_get_ghost_directory: (ghostpath, storage) ->\n    dirpath = GhostManager._canondirpath(storage.ghost_master_path(ghostpath))\n    storage.ghost_master(ghostpath)\n\n  # load ghost(shiori)\n  # @param [NanikaDirectory] ghost directory contents\n  # @return [Promise<Shiori>] ghost(shiori) instance\n  @_load_ghost: (directory) ->\n    ShioriLoader.detect_shiori(storage.backend.fs, dirpath).then((shiori) ->\n      shiori.load(dirpath)\n    )\n\n  # get shell instance\n  # @param ghostpath [string] ghostpath\n  # @param shellpath [string] shellpath\n  # @param storage [NanikaStorage] storage\n  # @return [Promise<Shell>] shell instance\n  _get_shell: (ghostpath, shellpath, storage) ->\n    @on_load_shell_files(ghostpath, shellpath)\n    GhostManager._get_shell_directory(ghostpath, shellpath, storage)\n    .then((directory) =>\n      @on_shell_load(ghostpath, shellpath, directory)\n      GhostManager._load_shell(directory)\n    ).then((shell) =>\n      @on_shell_loaded(ghostpath, shellpath, shell)\n      shell\n    )\n\n  # get hell directory contents\n  # @param ghostpath [string] ghostpath\n  # @param shellpath [string] shellpath\n  # @param storage [NanikaStorage] storage\n  # @return [Promise<NanikaDirectory>] shell directory contents\n  @_get_shell_directory: (ghostpath, shellpath, storage) ->\n    storage.shell(ghostpath, shellpath)\n\n  # load shell\n  # @param [NanikaDirectory] shell directory contents\n  # @return [Promise<Shell>] shell instance\n  @_load_shell: (directory) ->\n    shell = new cuttlebone.Shell(directory.asArrayBuffer())\n    shell.load()\n\n  # get balloon instance\n  # @param balloonpath [string] balloonpath\n  # @param storage [NanikaStorage] storage\n  # @return [Promise<Balloon>] balloon instance\n  _get_balloon: (balloonpath, storage) ->\n    @on_load_balloon_files(balloonpath)\n    GhostManager._get_balloon_directory(balloonpath, storage)\n    .then((directory) =>\n      @on_balloon_load(balloonpath, directory)\n      GhostManager._load_balloon(directory)\n    ).then((balloon) =>\n      @on_balloon_loaded(balloonpath, shell)\n      balloon\n    )\n\n  # get balloon directory contents\n  # @param balloonpath [string] balloonpath\n  # @param storage [NanikaStorage] storage\n  # @return [Promise<NanikaDirectory>] balloon directory contents\n  @_get_balloon_directory: (balloonpath, storage) ->\n    storage.balloon(balloonpath)\n\n  # load balloon\n  # @param [NanikaDirectory] balloon directory contents\n  # @return [Promise<Balloon>] balloon instance\n  @_load_balloon: (directory) ->\n    balloon = new cuttlebone.Balloon(directory.asArrayBuffer())\n    balloon.load()\n\n\nif module?.exports?\n  module.exports = GhostManager: GhostManager\nelse\n  @GhostManager = GhostManager\n"]}