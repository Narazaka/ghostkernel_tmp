{"version":3,"sources":["lib/ghostmanager.coffee","lib/ghostmanager.js"],"names":["GhostManager","profile","plugins","this","ghosts","prototype","boot_ghost","ghostpath","storage","namedmanager","get_kernel","then","kernel","start","shellpath","balloonpath","Promise","all","_get_ghost","_get_shell","_get_balloon","arg","balloon","named","shell","shiori","shiorif","ssp","Shiorif","register_named","SakuraScriptPlayer","GhostKernel","_canondirpath","dirpath","path_separator","match","replace","RegExp","on_load_ghost_files","_get_ghost_directory","_this","directory","on_ghost_load","_load_ghost","ghost","on_ghost_loaded","ghost_master_path","ghost_master","ShioriLoader","detect_shiori","backend","fs","load","on_load_shell_files","_get_shell_directory","on_shell_load","_load_shell","on_shell_loaded","cuttlebone","Shell","asArrayBuffer","on_load_balloon_files","_get_balloon_directory","on_balloon_load","_load_balloon","on_balloon_loaded","Balloon","module","exports","call"],"mappings":"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","file":"lib/ghostmanager.min.js","sourcesContent":["# Ukagaka baseware ghost manager\nclass GhostManager\n  # @property [Array<GhostKernel>] ghost instances\n  ghosts: null\n\n  # constructor\n  constructor: (@profile, @plugins) ->\n    @ghosts = []\n\n  boot_ghost: (ghostpath, storage, namedmanager) ->\n    @get_kernel(ghostpath, storage, namedmanager).then((kernel) ->\n      kernel.start()\n    )\n\n  # build ghost kernel\n  # @param ghostpath [string] ghostpath\n  # @param shellpath [string] shellpath\n  # @param balloonpath [string] balloonpath\n  # @param storage [NanikaStorage] storage\n  # @param namedmanager [NamedManager] named manager\n  # @return [Promise<GhostKernel>] ghost kernel instance\n  get_kernel: (ghostpath, shellpath, balloonpath, storage, namedmanager) ->\n    Promise.all([\n      @_get_ghost(ghostpath, storage)\n      @_get_shell(ghostpath, shellpath, storage)\n      @_get_balloon(balloonpath, storage)\n    ]).then(([shiori, shell, balloon]) ->\n      shiorif = new Shiorif(shiori)\n      named = namedmanager.register_named(shell, balloon)\n      ssp = new SakuraScriptPlayer(named)\n      new GhostKernel(shiorif, named, ssp)\n    )\n\n  # ensure path separator at dirpath' end\n  # @param dirpath [string] dirpath\n  # @return [string] dirpath that ends with path separator\n  @_canondirpath: (dirpath) ->\n    path_separator = dirpath.match(/[\\\\\\/]/)[0]\n    dirpath.replace(new RegExp('\\\\' + path_separator + '?$'), path_separator)\n\n  # get ghost(shiori) instance\n  # @param ghostpath [string] ghostpath\n  # @param storage [NanikaStorage] storage\n  # @return [Promise<Shiori>] ghost(shiori) instance\n  _get_ghost: (ghostpath, storage) ->\n    @on_load_ghost_files(ghostpath)\n    GhostManager._get_ghost_directory(ghostpath, storage)\n    .then((directory) =>\n      @on_ghost_load(ghostpath, directory)\n      GhostManager._load_ghost(directory)\n    ).then((ghost) =>\n      @on_ghost_loaded(ghostpath, ghost)\n      ghost\n    )\n\n  # get ghost directory contents\n  # @param ghostpath [string] ghostpath\n  # @param storage [NanikaStorage] storage\n  # @return [Promise<NanikaDirectory>] ghost directory contents\n  @_get_ghost_directory: (ghostpath, storage) ->\n    dirpath = GhostManager._canondirpath(storage.ghost_master_path(ghostpath))\n    storage.ghost_master(ghostpath)\n\n  # load ghost(shiori)\n  # @param [NanikaDirectory] ghost directory contents\n  # @return [Promise<Shiori>] ghost(shiori) instance\n  @_load_ghost: (directory) ->\n    ShioriLoader.detect_shiori(storage.backend.fs, dirpath).then((shiori) ->\n      shiori.load(dirpath)\n    )\n\n  # get shell instance\n  # @param ghostpath [string] ghostpath\n  # @param shellpath [string] shellpath\n  # @param storage [NanikaStorage] storage\n  # @return [Promise<Shell>] shell instance\n  _get_shell: (ghostpath, shellpath, storage) ->\n    @on_load_shell_files(ghostpath, shellpath)\n    GhostManager._get_shell_directory(ghostpath, shellpath, storage)\n    .then((directory) =>\n      @on_shell_load(ghostpath, shellpath, directory)\n      GhostManager._load_shell(directory)\n    ).then((shell) =>\n      @on_shell_loaded(ghostpath, shellpath, shell)\n      shell\n    )\n\n  # get hell directory contents\n  # @param ghostpath [string] ghostpath\n  # @param shellpath [string] shellpath\n  # @param storage [NanikaStorage] storage\n  # @return [Promise<NanikaDirectory>] shell directory contents\n  @_get_shell_directory: (ghostpath, shellpath, storage) ->\n    storage.shell(ghostpath, shellpath)\n\n  # load shell\n  # @param [NanikaDirectory] shell directory contents\n  # @return [Promise<Shell>] shell instance\n  @_load_shell: (directory) ->\n    shell = new cuttlebone.Shell(directory.asArrayBuffer())\n    shell.load()\n\n  # get balloon instance\n  # @param balloonpath [string] balloonpath\n  # @param storage [NanikaStorage] storage\n  # @return [Promise<Balloon>] balloon instance\n  _get_balloon: (balloonpath, storage) ->\n    @on_load_balloon_files(balloonpath)\n    GhostManager._get_balloon_directory(balloonpath, storage)\n    .then((directory) =>\n      @on_balloon_load(balloonpath, directory)\n      GhostManager._load_balloon(directory)\n    ).then((balloon) =>\n      @on_balloon_loaded(balloonpath, shell)\n      balloon\n    )\n\n  # get balloon directory contents\n  # @param balloonpath [string] balloonpath\n  # @param storage [NanikaStorage] storage\n  # @return [Promise<NanikaDirectory>] balloon directory contents\n  @_get_balloon_directory: (balloonpath, storage) ->\n    storage.balloon(balloonpath)\n\n  # load balloon\n  # @param [NanikaDirectory] balloon directory contents\n  # @return [Promise<Balloon>] balloon instance\n  @_load_balloon: (directory) ->\n    balloon = new cuttlebone.Balloon(directory.asArrayBuffer())\n    balloon.load()\n\n\nif module?.exports?\n  module.exports = GhostManager: GhostManager\nelse\n  @GhostManager = GhostManager\n",null],"sourceRoot":"/source/"}